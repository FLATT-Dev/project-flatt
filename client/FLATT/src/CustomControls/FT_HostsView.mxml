<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:CustomControls="CustomControls.*"
		 width="100%" height="100%" creationComplete="OnInit()" title="Hosts And Groups">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import Application.*;
			
			import DesktopApp.*;
			
			import FLATTPlugin.*;
			
			import Licensing.*;
			
			import TargetHostManagement.*;
			
			import Utility.*;
			
			import com.ZG.Events.*;
			import com.ZG.UserObjects.*;
			import com.ZG.Utility.*;
			
			import mx.managers.PopUpManager;
			
			
			//--------------------------------------
			private function OnInit():void
			{
				// hook up to receive host scanner events
				FT_TargetHostManager.GetInstance().addEventListener(FT_Events.FT_EVT_HOST_SCAN_START,OnHostScanEvent);
				// the tree handles data that comes from  the host scanner.
				FT_TargetHostManager.GetInstance().addEventListener(FT_Events.FT_EVT_HOST_SCAN_DATA,
										m_HostsTree.OnHostScanData);
				FT_TargetHostManager.GetInstance().addEventListener(FT_Events.FT_EVT_HOST_SCAN_DONE,OnHostScanEvent);
				m_HostsTree.addEventListener(FT_Events.FT_EVT_CONTEXT_MENU_HOST_ADD,AddHostHandler);
				AdjustUI(false);// disable everything on init
			}
			//--------------------------------------------
			// called when a host is added from the tree via context menu
			private function AddHostHandler(evt:Event):void
			{
				OnAddHost();
			}
			//--------------------------------------
			public function OnAddHost():void
			{
				if(FT_LicenseChecker.AdjustForLicense(FT_LicenseManager.LIC_CHECK_NUM_HOSTS,null,m_HostsTree.dataProvider))
				{
					var hostEditorWnd:FT_HostEditAndLoginWindow = PopUpManager.createPopUp(this, FT_HostEditAndLoginWindow, true) as FT_HostEditAndLoginWindow;
					hostEditorWnd.addEventListener(FT_Events.FT_EVT_ADD_HOST,m_HostsTree.OnEditWindowClosed);
					hostEditorWnd.SetCurrentHost(null);
					PopUpManager.centerPopUp(hostEditorWnd);
					PopUpManager.bringToFront(hostEditorWnd);
				}
			}
			
			//------------------------------------------
			public function OnImportHostGrp():void
			{
				var fileBrowser:ZG_FileUtils = new ZG_FileUtils();
				fileBrowser.addEventListener(ZG_Event.EVT_READ_FILE_COMPLETE,OnReadFileComplete);
				fileBrowser.addEventListener(ZG_Event.EVT_READ_FILE_CANCEL,OnReadFileComplete);		
				fileBrowser.BrowseReadFile("","");// all file types						
			}
			//------------------------------------------
			private function OnReadFileComplete(evt:ZG_Event):void
			{								
				if(evt.type == ZG_Event.EVT_READ_FILE_COMPLETE)
				{			
					if(evt.data!=null)
					{	
						//var newPlug:FT_Plugin = new FT_Plugin(evt.data.data as String);	
						FT_TargetHostManager.GetInstance().HandleHostImport(evt.data as ZG_FileData);						
					}
				}				
			}
			//-------------------------------------------------
			private function OnScanBtnClick(event:MouseEvent):void
			{
				// cancel scan returns true if the scan was in progress and
				// was canceled and false if scan was not in progress.
				// in that case start another scan
				if(!FT_TargetHostManager.GetInstance().CancelScan())
				{
					FT_TargetHostManager.GetInstance().RunHostScan();
				}
					
			}
			//-------------------------------------------------
			private function OnHostScanEvent(evt:ZG_Event):void
			{
				switch (evt.type)
				{
					case FT_Events.FT_EVT_HOST_SCAN_START:
					{
						AdjustUI(true);													
						break;		
					}				
					case FT_Events.FT_EVT_HOST_SCAN_DONE:
						FT_Prefs.GetInstance().SaveHosts(m_HostsTree.dataProvider.toArray());
						AdjustUI(false);
						break;
					default:
						break;
				}
			}
			//--------------------------------
			private function AdjustUI(scanInProgress:Boolean):void
			{
				m_ProgresSpinner.visible = scanInProgress;
				if(m_ProgresSpinner.visible)
				{
					m_ProgresSpinner.play();
				}
				else
				{
					m_ProgresSpinner.stop();
				}
				
				m_ScanningStatusText.visible = scanInProgress;
				m_ScanBtn.label = (scanInProgress? "Stop":"Scan");
			}
			//-------------------------------------------
			public function HanldeItemUpdate(item:Object):void
			{
				m_HostsTree.HandleItemUpdate(item as FT_TargetHost);
			}
		
			
		]]>
	</fx:Script>
	
	
	<CustomControls:FT_HostsTree id="m_HostsTree" left="0" right="0" top="0" bottom="26">		
	</CustomControls:FT_HostsTree>
	<s:BorderContainer height="26" backgroundColor="#CCCCCC" bottom="0" right="0" left="0" visible="true">
		
		<s:Label id="m_ScanningStatusText" visible="true" right="62" bottom="1" width="124"
				 height="21" text="Scanning for hosts..." verticalAlign="middle"/>
		
		<s:Button id="m_ScanBtn" right="8" bottom="1.5" width="50" label="Stop" 
				   toolTip="Scan for hosts to administer"
				  click="OnScanBtnClick(event)" enabled="true" fontWeight="bold"/>
				  
		<CustomControls:Spinner  
			tickWidth="2"  
			size="18"  
			numTicks="8" 
			left="1" top="1.5" 
			id="m_ProgresSpinner" 
			visible="true"/>
		
	</s:BorderContainer>
	
	<!-- Spark button does not have icons.. how stupid is that
	Will have to wait till Hero. Until then -use mx:Button even though Adobe recommends using s:Button-->
	
	<mx:Button id="m_ImportHostGrp" visible="false" y="-27.7" right="32" width="24" height="24"
			   label="Button" click="OnImportHostGrp()" icon="@Embed('assets/import-22.png')"
			   toolTip="Import Host group from file"/>
	<mx:Button id="m_AddHost" visible="false" y="-27.7" right="86" width="24" height="24"
			   label="Button" click="OnAddHost()" icon="@Embed('assets/host-16.png')"
			   toolTip="Add Host"/>
	<mx:Button id="m_AddGrp" visible="false" y="-27.7" right="59" width="24" height="24"
			   label="Button" click="m_HostsTree.OnAddGroup()"
			   icon="@Embed('assets/hostgrp-16.png')" toolTip="Add Group"/>
	<mx:Button id="m_Remove" visible="false" y="-27.7" right="5" width="24" height="24"
			   label="Button" click="m_HostsTree.OnRemove()" icon="@Embed('assets/remove-16.png')"
			   toolTip="Remove"/>	
	<CustomControls:SearchField height="20" id="m_SearchField"
								delay="50" cornerRadius="3" 
								backgroundAlpha="0.9" 
								toolTip="Search for Hosts and Host Groups"
								search="{m_HostsTree.FilterFunc(event)}" 
 borderVisible="false" dropShadowVisible="false" left="124" top="-26" right="10">
	</CustomControls:SearchField>
</s:Panel>
